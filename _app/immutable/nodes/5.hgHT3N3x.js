import{c as r,s as e,a as n,t as f,r as s,f as U,d as h,n as m}from"../chunks/disclose-version.Bp1Y62Lx.js";import{t as Y,p as q,G as F,R as J,a as K}from"../chunks/index-client.DElzHtsw.js";import{i as Q}from"../chunks/lifecycle.DSA5eMcb.js";import{C as v}from"../chunks/Code.dmhNf5x3.js";import{a as M,s as X,t as Z}from"../chunks/general.svelte.vTPFSwDH.js";import{p as A}from"../chunks/props.C3SyeIBd.js";import{P as H}from"../chunks/PropertiesTable.DsCpRWDq.js";import{c as T,a as ee}from"../chunks/main.cYz7HraO.js";import{e as te}from"../chunks/public.DKTOmWtN.js";var oe=f('<div class="columns-container svelte-h7m3nf"><div class="columns-container__left svelte-h7m3nf"><!></div> <div class="columns-container__right svelte-h7m3nf"><!></div></div>');function C($,c){var u,g;let y=A(c,"gap",0,0),b=A(c,"even",0,!1);var i=oe(),p=r(i),_=r(p);M(_,(u=c.$$slots)==null?void 0:u.left,{}),s(p);var d=e(e(p,!0)),x=r(d);M(x,(g=c.$$slots)==null?void 0:g.right,{}),s(d),s(i),Y(()=>{X(i,"style",`--gap: ${y()??""}px`),Z(i,"even",b())}),n($,i)}var re=f('<div slot="right" class="result-panel"><div class="test-box" id="box-1">#box-1</div></div>'),se=f('<div slot="right" class="result-panel"><div class="test-box" id="box-2">#box-2</div></div>'),ne=f('<div slot="right" class="result-panel"><div class="test-box" id="box-3">#box-3</div></div>'),ae=f(`<h1 id="creating-pointers">Creating pointers</h1> <section class="doc-section"><p>In Point it out, we call "pointer" to created and absolutely positioned elements via the
    create() function.</p> <!> <section class="doc-section"><h2>Common params and options for all pointers</h2> <!></section></section> <section class="doc-section"><h1 id="rect">Rect</h1> <p>The first and most basic pointer. In addition to the options described above, this pointer has
    the following specific options:</p> <!> <section class="doc-section"><h2>Examples</h2> <p style="margin-bottom: 2rem;">Notice the use of "container" option to create the SVG inside the &lt;main&gt; element instead
      body, avoiding issues with the scrollable main.</p> <!> <!> <!></section></section> <section class="doc-section"><h1 id="pointer-references">Pointer references</h1> <p>The create function returns a reference to a Pointer instance, an object with some useful
    methods to manipulate it. Also contains a reference to the target element and the created raw
    HTMLElement.</p> <!></section>`,1);function ve($,c){q(c,!1);const{PUBLIC_VERSION:y}=te,b=[{property:"pointerType",types:["PointerType"],description:`A string that actually (${y}) can only 
        be <strong>'rect'</strong>, but <strong>'arrow'</strong> and <strong>'image'</strong> will be included soon.`},{property:"options",types:["<strong>CreateOptions</strong>"],description:`An object whose properties depend on  
        pointerType. Only the common ones for all pointers are described below.`,props:[{property:"target",types:["HTMLElement","string"],description:`The element to point out. Can be a direct reference 
                (HTMLElement) or any kind of CSS selector (string).`},{property:"container",default:"document.body",types:["HTMLElement","string"],description:"Container where append the pointer. A reference or CSS selector string. NOTE: The container <strong>should have the position property set to a value different to the default static.</strong>"},{property:"className",default:"undefined",types:["string","string[]"],description:"Class/classes to add to the new pointer element."}]}],i=[{property:"strokeWidth",default:"4",types:["number"],description:"Stroke width in pixels."},{property:"strokeColor",default:"'orange'",types:["string"],description:"Stroke color. A SVG/CSS valid color string i.e <strong>'#aa23c8'</strong> or <strong>'rgba(211, 17, 32, 0.5)'</strong>."},{property:"round",default:"0",types:["number","string","<strong>object</strong>"],description:"Round borders as number (pixel), a string with any valid SVG value (i.e '20%') or an object with rx and ry properties explained below.",props:[{property:"rx",default:"0",types:["number","string"],description:"Round applied to horizontal axis."},{property:"ry",default:"0",types:["number","string"],description:"Round applied to vertical axis."}]},{property:"padding",default:"0",types:["number"],description:"How separated (in pixels) from the target content is the rect. Can be negative. By default (0 padding) the rect surrounds perfectly the target's bounding rect."}];F(()=>{T("rect",{target:"#box-1",container:"main",padding:8}),T("rect",{target:"#box-2",container:"main",strokeWidth:8,strokeColor:"#68c"}),T("rect",{target:"#box-3",container:"main",strokeColor:"#f8c",round:"30%",padding:12})}),J(ee),Q();var p=ae(),_=U(p),d=e(e(_,!0)),x=r(d),u=e(e(x,!0));v(u,{showLanguage:!1,showSelectAllButton:!0,language:"TypeScript",children:(o,l)=>{m();var t=h();t.nodeValue=`import { create } from 'pointitout' 

create('rect', { target: '#target-css-selector' })`,n(o,t)},$$slots:{default:!0},$$legacy:!0});var g=e(e(u,!0)),O=r(g),R=e(e(O,!0));H(R,{title:"create ( pointerType, <span id='options-in-title'>options</span> )",pioOptionsList:b,$$legacy:!0}),s(g),s(d);var w=e(e(d,!0)),j=r(w),B=e(e(j,!0)),S=e(e(B,!0));H(S,{title:"create ( <strong>'rect'</strong>, options )",pioOptionsList:i,$$legacy:!0});var P=e(e(S,!0)),G=r(P),I=e(e(G,!0)),L=e(e(I,!0));C(L,{$$slots:{left:(o,l)=>{v(o,{slot:"left",language:"TypeScript",showLanguage:!1,noTop:!0,children:(t,V)=>{m();var a=h();a.nodeValue=`create('rect', {
    target: '#box-1', 
    container: 'main',
    padding: 8
})`,n(t,a)},$$slots:{default:!0},$$legacy:!0})},right:(o,l)=>{var t=re();r(t),s(t),n(o,t)}},$$legacy:!0});var k=e(e(L,!0));C(k,{even:!0,$$slots:{left:(o,l)=>{v(o,{slot:"left",noTop:!0,language:"TypeScript",showLanguage:!1,children:(t,V)=>{m();var a=h();a.nodeValue=`create('rect', {
    target: '#box-2', 
    container: 'main',
    strokeWidth: 8,
    strokeColor: '#68c'
})`,n(t,a)},$$slots:{default:!0},$$legacy:!0})},right:(o,l)=>{var t=se();r(t),s(t),n(o,t)}},$$legacy:!0});var N=e(e(k,!0));C(N,{$$slots:{left:(o,l)=>{v(o,{slot:"left",noTop:!0,language:"TypeScript",showLanguage:!1,children:(t,V)=>{m();var a=h();a.nodeValue=`create('rect', {
    target: '#box-3', 
    container: 'main',
    strokeColor: '#f8c',
    round: '30%',
    padding: 12
})`,n(t,a)},$$slots:{default:!0},$$legacy:!0})},right:(o,l)=>{var t=ne();r(t),s(t),n(o,t)}},$$legacy:!0}),s(P),s(w);var E=e(e(w,!0)),W=r(E),D=e(e(W,!0)),z=e(e(D,!0));v(z,{showLanguage:!1,showSelectAllButton:!0,language:"TypeScript",children:(o,l)=>{m();var t=h();t.nodeValue=`import { create } from 'pointitout' 

const pointer = create('rect', { target: '#target-element-id' })

// You can access to the target element and the raw 
// created HTMLElement from this object if you need
console.log(pointer.target) 
console.log(pointer.htmlElement) // or some methods. More of this later. 

pointer.destroy() // Destroy the HTMLElement and listeners`,n(o,t)},$$slots:{default:!0},$$legacy:!0}),s(E),n($,p),K()}export{ve as component};
